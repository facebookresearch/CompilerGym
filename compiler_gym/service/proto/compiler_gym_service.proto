// The CompilerGym service interface description.
//
// Copyright (c) Facebook, Inc. and its affiliates.
//
// This source code is licensed under the MIT license found in the
// LICENSE file in the root directory of this source tree.

syntax = "proto3";

package compiler_gym;

option cc_enable_arenas = true;
option go_package = "compiler_gympb";
option java_multiple_files = true;
option java_outer_classname = "CompilerGymServiceProto";
option java_package = "com.compiler_gym";

// The CompilerGymService is the interface that exposes the incremental
// optimization of a program as an interactive environment.
service CompilerGymService {
  // Request version strings from the service.
  rpc GetVersion(GetVersionRequest) returns (GetVersionReply);
  // Request the action and observation spaces that this service supports. The
  // service responds with an initial action space, and a list of available
  // observation and reward spaces.
  rpc GetSpaces(GetSpacesRequest) returns (GetSpacesReply);
  // Start a new CompilerGym service session. This allocates a new session on
  // the service and returns a session ID. To terminate the session, call
  // EndSession() once done. Raises grpc::StatusCode::NOT_FOUND if the requested
  // benchmark URI is not found.
  rpc StartSession(StartSessionRequest) returns (StartSessionReply);
  // Fork a session. This creates a new session in exactly the same state. The
  // new session must be terminated with EndSession() once done. This returns
  // an error if the session to fork does not exist.
  rpc ForkSession(ForkSessionRequest) returns (ForkSessionReply);
  // End a CompilerGym service session. If the requested session does not exist,
  // this returns an error.
  rpc EndSession(EndSessionRequest) returns (EndSessionReply);
  // Apply a list of optimization decisions and compute a list of observations
  // for a session. Optimization decisions are selected from the last
  // ActionSpace returned by a call to GetSpaces() or Step(). Valid observations
  // are queried using GetSpaces(). This returns an error if the requested
  // session does not exist.
  rpc Step(StepRequest) returns (StepReply);
  // Register a new benchmark.
  rpc AddBenchmark(AddBenchmarkRequest) returns (AddBenchmarkReply);
  // Transmit <key, value> parameters to a session. Each parameter generates a
  // string response. It us up to the client/service to agree on a common schema
  // for encoding and decoding these parameters. An unknown key/value returns
  // grpc::StatusCode::INVALID_ARGUMENT.
  rpc SendSessionParameter(SendSessionParameterRequest) returns (SendSessionParameterReply);
}

// A GetVersion() request.
message GetVersionRequest {}

// The GetVersion() response.
message GetVersionReply {
  // The version string for this service.
  string service_version = 1;
  // The version string for the underlying compiler.
  string compiler_version = 2;
}

// A StartSession() request.
message StartSessionRequest {
  reserved 1;
  // The benchmark to use.
  Benchmark benchmark = 4;
  // An index into the GetSpacesReply.action_space_list selecting the action
  // space that is to be used for this session. Once set, the action space
  // cannot be changed for the duration of the session.
  int32 action_space = 2;
  // A list of indices into the GetSpacesReply.observation_space_list
  repeated int32 observation_space = 3;
}

// A StartSession() reply.
message StartSessionReply {
  reserved 2;
  // The ID that has been assigned to the session. The client must use this ID
  // in all subsequent interactions with the service for this session.
  int64 session_id = 1;
  // A new action space. This is set only if, after initializing the session,
  // the action space has changed from the default action space returned by
  // GetSpaces(). If set, the environment should discard the previous action
  // space and replace it with this one. Else, the action space remains
  // unchanged.
  ActionSpace new_action_space = 3;
  // Observed states after completing the action.
  repeated Observation observation = 4;
}

// A Step() request.
message StepRequest {
  // The ID of the session.
  int64 session_id = 1;
  // A list of actions to execute, in order.
  repeated Action action = 2;
  // A list of indices into the GetSpacesReply.observation_space_list
  repeated int32 observation_space = 3;
}

// A Step() reply.
message StepReply {
  // Indicates that the session has ended. This could be because there are no
  // further actions that can be made, or because the action has led to an
  // invalid state. Once this field has been set, you should make no further
  // calls to step(). However, you mays still request reward and new
  // observations.
  bool end_of_session = 1;
  // A service may set this field to true if the action is known not to have
  // any effect. This allows an agent to assume that observations or rewards
  // computed before this action remain valid, providing that they are
  // deterministic.
  bool action_had_no_effect = 2;
  // A new action space. This field is set if, as a result of running the
  // requested action, the action space has changed. Else, the action space
  // remains unchanged.
  ActionSpace new_action_space = 3;
  // Observed states after completing the action.
  repeated Observation observation = 4;
}

// A description of an action space. An action space consists of one or more
// choices that can be made by an agent in a call to Step(). An action space
// with a single choice is scalar; an action-space with `n` choices represents
// an `n`-dimensional action space.
message ActionSpace {
  // The name of the action space.
  string name = 1;
  // The list of choices that comprise this action.
  repeated ChoiceSpace choice = 2;
  // An optional list of names for the choices.
  bool named_choices = 3;
}

// An action.
message Action {
  // A list of choices that corresponds to the ActionSpace's choice list.
  repeated Choice choice = 1;
}

// The space for a single choice. An Action comprises one or more choices.
message ChoiceSpace {
  // An optional name for this choice. Only required if
  // ActionSpace.named_choices is set.
  string name = 1;
  // The choice space.
  oneof space {
    // A bounded integer choice.
    ScalarRange int64_range = 2;
    // A possibly bounded real-valued choice.
    ScalarRange double_range = 3;
    // A discrete space in which every point in the space is named.
    NamedDiscreteSpace named_discrete_space = 4;
  }
}

// A single choice. An Action comprises one or more Choices.
message Choice {
  // The value of the choice, corresponding to the ChoiceSpace from the
  // ActionSpace.choice list.
  oneof value {
    int64 int64_value = 1;
    double double_value = 2;
    int64 named_discrete_value_index = 3;
  }
}

// A discrete space in which every point in the space is named. This can be used
// for representing enumerations.
message NamedDiscreteSpace {
  // A list of names for every value in the space. The order in which these
  // values are returned is used.
  repeated string value = 1;
  // If true, the set of space can be interpreted as a list of command line
  // flags.
  bool is_commandline = 2;
}

// An observations from a compiler.
message Observation {
  // A point in an ObservationSpace is _either_ a scalar or vector of integers
  // or real values, a string, or an opaque byte array.
  oneof value {
    Int64List int64_list = 1;
    DoubleList double_list = 2;
    string string_value = 3;
    bytes binary_value = 4;
    int64 scalar_int64 = 5;
    double scalar_double = 6;
  }
}

// A list of 64 bit integers.
message Int64List {
  repeated int64 value = 1;
}

// A list of doubles.
message DoubleList {
  repeated double value = 1;
}

// The [min, max] range of a scalar.
message ScalarRange {
  // The minimum value (inclusive). If not set, the value is -inf.
  ScalarLimit min = 1;
  // The maximum value (inclusive). If not set, the value is +inf.
  ScalarLimit max = 2;
}

// Representation of the upper or lower limit of a scalar.
message ScalarLimit {
  double value = 1;
}

// A list of scalar ranges.
message ScalarRangeList {
  repeated ScalarRange range = 1;
}

message SequenceSpace {
  ScalarRange length_range = 1;
  ScalarRange scalar_range = 2;
}

// The description of a space of observations.
message ObservationSpace {
  // The name of the observation space.
  string name = 1;
  // The shape of the observation space. All Observations
  // from an ObservationSpace have the same shape.
  oneof shape {
    ScalarRangeList int64_range_list = 2;
    ScalarRangeList double_range_list = 3;
    // For character and byte arrays, the _size_range field describes the range of
    // possible sizes, e.g. a string_size_range of [10, +inf] means that
    // observations are strings of at least 10 characters in length.
    ScalarRange string_size_range = 4;
    ScalarRange binary_size_range = 5;
    // For scalar values, the _range field describes the bounds of the scalar
    // value.
    ScalarRange scalar_int64_range = 10;
    ScalarRange scalar_double_range = 11;
    // A variable-length sequence of elements.
    SequenceSpace double_sequence = 12;
  }
  // An optional string describing an opaque data format, e.g. a data structure
  // that is serialized to a string/binary array for transmission back to the
  // client. It is up to the client and service to agree on how to decode
  // observations using this value. For example, an opaque_data_format of
  // "string_json" could be used to indicate that the observation is a
  // string-serialized JSON value.
  string opaque_data_format = 6;
  // Whether the observation space is deterministic.
  bool deterministic = 7;
  // Whether the observations depend on the service execution environment.
  bool platform_dependent = 8;
  // A default observation. This value should be used by the client in lieu
  // of a true observation if the compiler service terminates abruptly, such as
  // a crash while applying an action.
  Observation default_value = 9;
}

// A Fork() request.
message ForkSessionRequest {
  // The ID of the session to fork.
  int64 session_id = 1;
}

// A Fork() reply.
message ForkSessionReply {
  // The ID of the newly created session.
  int64 session_id = 1;
}

// An EndSession() request.
message EndSessionRequest {
  // The ID of the session.
  int64 session_id = 1;
}

// An EndSession() reply.
message EndSessionReply {
  // The number of sessions that the service currently has.
  int32 remaining_sessions = 1;
}

// A GetSpaces() request.
message GetSpacesRequest {}

// A GetSpaces() reply.
message GetSpacesReply {
  // A list of one or more action spaces that the service supports.
  repeated ActionSpace action_space_list = 1;
  // A list of available observation spaces. A service may support one or more
  // observation spaces.
  repeated ObservationSpace observation_space_list = 2;
}

// Representation of the input to a compiler.
message Benchmark {
  // The name of the benchmark to add. In case of conflict with an existing
  // benchmark, this new benchmark replaces the existing one.
  string uri = 1;
  // The description of the program that is being compiled. It is up to the
  // service to determine how to interpret this file, and it is the
  // responsibility of the client to ensure that it provides the correct format.
  // For example, the service could expect that this file contains serialized
  // IR data, or an input source file.
  File program = 2;
  // An optional configuration option that details how to build and run the
  // benchmark program.
  BenchmarkDynamicConfig dynamic_config = 3;
}

// Description of how to build and run a benchmark binary.
message BenchmarkDynamicConfig {
  // A command to execute to build the benchmark for dynamic execution.
  Command build_cmd = 1;
  // A command to execute to run the benchmark.
  Command run_cmd = 2;
  // A list of commands to execute before running the benchmark.
  repeated Command pre_run_cmd = 3;
  // A list of commands to execute after running the benchmark.
  repeated Command post_run_cmd = 4;
}

// Representation of a command that can be executed.
message Command {
  // A list of command line arguments.
  repeated string argument = 1;
  // An optional key-value mapping of environment variables to set.
  map<string, string> env = 2;
  // The maximum runtime of the command.
  int32 timeout_seconds = 3;
  // An optional list of files that are required by this command. If set, the
  // presence of the files will be tested for before running the command. This
  // can be useful for providing informative error messages.
  repeated string infile = 4;
  // An optional list of files that are generated by this command. If set, the
  // presence of the files will be tested for after running the command.
  repeated string outfile = 5;
}

// A File message represents a file object.
message File {
  oneof data {
    // The raw data of the file.
    bytes contents = 1;
    // The URI of the file which can be accessed. Note that this requires that
    // the compiler service and the Python frontend share a file system, which
    // cannot be assumed for general use.
    string uri = 2;
  }
}

// An AddBenchmark() request.
message AddBenchmarkRequest {
  // A list of benchmarks to add.
  repeated Benchmark benchmark = 1;
}

// An AddBenchmark() reply.
message AddBenchmarkReply {}

// An arbitrary string parameter value for a session.
message SessionParameter {
  // A string key.
  string key = 1;
  // A string value.
  string value = 2;
}

// A SendSessionParameter() request.
message SendSessionParameterRequest {
  // The ID of the session.
  int64 session_id = 1;
  // A list of <key, value> parameters to pass to the session.
  repeated SessionParameter parameter = 2;
}

// A SendSessionParameter() reply.
message SendSessionParameterReply {
  // A list of response messages, one per parameter request.
  repeated string reply = 1;
}
