%    Copyright (C) 1991, 1995, 1996 Aladdin Enterprises.  All rights reserved.
%
% This file is part of Aladdin Ghostscript.
%
% Aladdin Ghostscript is distributed with NO WARRANTY OF ANY KIND.  No author
% or distributor accepts any responsibility for the consequences of using it,
% or for whether it serves any particular purpose or works at all, unless he
% or she says so in writing.  Refer to the Aladdin Ghostscript Free Public
% License (the "License") for full details.
%
% Every copy of Aladdin Ghostscript must include a copy of the License,
% normally in a plain ASCII text file named PUBLIC.  The License grants you
% the right to copy, modify and redistribute Aladdin Ghostscript, but only
% under certain conditions described in the License.  Among other things, the
% License requires that the copyright notice and this notice be preserved on
% all copies.

% gslp.ps - format and print text

% This utility provides functionality approximately equivalent to the Unix
% `enscript' program.  It prints plain text files using a single font.
% It currently handles tabs and formfeeds, but not backspaces.
% It only works with fixed-pitch fonts.
% Standard flags implemented:
%	-12BclqRr -b<header> -f<font> -F<hfont> -L<lines> -p<outfile>
% Sun flags implemented:
%	-T<n>	set tab width
% Flags ignored:
%	-GghKkmow -# -C -d -J -n -P -S -s -t -v
% Flags added:
%	--columns <n>
%		print in <n> columns
%	--detect
%		treat the file as PostScript if it starts with %!
%	--first-page <n>
%		start printing at page <n>
%	--last-page <n>
%		stop printing after page <n>
%	--(heading|footing)-(left|center|right) <string>
%		set the heading/footing fields; use -B first to clear
%	--margin-(top|bottom|left|right) <inches>
%		set a margin
%	--no-eject-(file|formfeed)
%		end-of-file/FF only starts a new column, not a new sheet
%	--spacing <n>
%		use double (n=2), triple (n=3), etc. spacing
% Also, the string %# in a heading or footing is replaced with the page #.
/PageNumberString (%#) def

/lpdict 150 dict def
lpdict begin

% build iso-latin-1 version of a font
/font-to-iso-latin-1 {	% <font> font-to-iso-latin-1 <font>
    %% reencode for iso latin1; from the 2nd edition red book, sec 5.6.1
    dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding ISOLatin1Encoding def currentdict end
    dup /FontName get 80 string cvs (-ISOLatin1) concatstrings cvn
    exch definefont
} def

/find-latin-font {	% <name> find-latin-font <font>
  findfont font-to-iso-latin-1
} def

% Define the initial values of the printing parameters.

/BodyFont null def		% use default
  /defaultBodyFont
    { /Courier find-latin-font Landscape { 7 } { 10 } ifelse scalefont } def
/Columns 1 def
/DetectFileType false def
/EjectEOF true def
/EjectFF true def
/Footers false def
/FootingLeft () def
/FootingCenter () def
/FootingRight () def
/Headers true def
/HeadingLeft () def
/HeadingCenter () def
/HeadingRight (page ) PageNumberString concatstrings def
/HeadingFont null def		% use default
  /defaultHeadingFont
    { /Courier-Bold find-latin-font 10 scalefont } def
/Landscape false def
/MarginBottom 36 def		% 1/2"
/MarginLeft 36 def		% 1/2"
/MarginRight 36 def		% 1/2"
/MarginTop 36 def		% 1/2"
/MaxLines 9999 def		% max lines per page
/Noisy true def			% i.e., not quiet
/OutFile null def		% null = write directly to device
/PageFirst 1 def
/PageLast 99999 def
/Spacing 1 def
/Tab 8 def
/Truncate false def		% wrap long lines, don't truncate

% When writing to a file, we want to write out PostScript;
% when writing to the printer, we want to execute it;
% some commands should be executed regardless.
% lpexec provides for all this.

/lpexec		% <arg1> ... <argn> </op> <n> <do_always> lpexec -
 { OutFile null eq
    { pop 1 add true
    }
    { /t exch def 1 add /n exch def cvx
      n { n -1 roll dup wosp } repeat
      OutFile (\n) writestring
      n t
    }
   ifelse
    { pop load exec }
    { { pop } repeat }
   ifelse
 } def

/lpmoveto
 { /moveto 2 true lpexec
 } def
/lpshow
 { dup length 0 ne { /show 1 false lpexec } { pop } ifelse
 } def
/lpsetmyfont
 { dup load setfont
   OutFile null ne { cvx /setfont 1 false lpexec } { pop } ifelse
 } def

% Define some utility procedures.

/banner		% ypos left center right
 { /HFont lpsetmyfont
   3 -1 roll bannerstring pop 0 4 index pwidth showline2 pop
   exch bannerstring pwidth exch sub 2 div 3 index pwidth showline2 pop
   bannerstring pwidth exch sub
   3 -1 roll pwidth showline2 pop
 } def

/bannerstring	% string -> string width
  { PageNumberString search
     { exch pop pindex 4 string cvs concatstrings exch concatstrings
     }
    if dup stringwidth pop
  } def

/beginpage
 { /lindex 0 def
   /skipping pindex PageFirst ge pindex PageLast le and not def
   /save 0 true lpexec /pagesave exch def
   skipping { nulldevice   /OutFile null def } if
   Headers
    { lheight hdescent add
      HeadingLeft HeadingCenter HeadingRight banner
    } if
   /BFont lpsetmyfont
 } def

/endpage
 { lindex 0 ne
    { Footers
       { topskip plength sub hdescent add
         FootingLeft FootingCenter FootingRight banner
       } if
      /showpage 0 false lpexec
    } if
   pagesave /restore 0 true lpexec
   /pindex pindex 1 add def
 } def

/endcolumn
 { lindex colines 1 sub add colines idiv colines mul
   dup llength ge { pop endpage beginpage } { /lindex exch def } ifelse
 } def

/fontheight	% <font> fontheight <ascent> <height>
 { gsave setfont
   newpath 0 0 moveto
   (|^_j) false charpath
   pathbbox exch pop dup 2 index sub 4 -2 roll pop pop
   grestore exch 1.25 mul exch 1.25 mul
 } def

/wosp
 { OutFile ( ) writestring OutFile exch write==only
 } def

/outfont		% name font ->
 { OutFile null ne
    { exch wosp
      dup /FontName get
      dup wosp OutFile ( findfont) writestring
      %% reencode for iso latin1; from the 2nd edition red book, sec 5.6.1
      OutFile (
	dup length dict begin {1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding ISOLatin1Encoding def currentdict end
      ) writestring
      wosp OutFile (-ISOLatin1 exch definefont) writestring
      /FontMatrix get 0 get 1000 mul round cvi wosp
      OutFile ( scalefont def\n) writestring
    }
    { pop pop
    }
   ifelse
 } def

/StringFF (\f) def
/CharFF StringFF 0 get def
/StringTAB (\t) def
/CharTAB StringTAB 0 get def

/showline		% line -> leftover_line (handles \f)
 {  { showline1 dup length 0 eq { exit } if
      dup 0 get CharFF ne { exit } if
      EjectFF { endpage beginpage } { endcolumn } ifelse
      skip1
    }
   loop
 } def

/showline1		% line -> leftover_line (handles page break)
 { lindex llength eq { endpage beginpage } if
   lindex colines idiv cowidth mul		% x
   lindex colines mod 1 add lheight mul neg fascent sub	% y
   1 index cowidth add
   showline2
   /lindex lindex 1 add def
 } def

/showline2	% string x y xlimit -> leftover_string (handles tabs)
 { 2 index exch 5 2 roll lpmoveto	% xinit xlimit string
    { showline3 dup length 0 eq { exit } if
      dup 0 get CharTAB ne { exit } if
      currentpoint exch 4 index sub tabwx div
	0.05 add ceiling tabwx mul 4 index add exch lpmoveto
      skip1
      currentpoint pop 2 index ge { exit } if
    }
   loop exch pop exch pop
 } def

/showline3	% xlimit string -> xlimit leftover_string
		% (finds line break / tab / formfeed)
 { currentpoint pop 2 index exch sub
     cwx div 0.1 add cvi 0 max 1 index length min
   1 index 0 3 -1 roll getinterval
	% look for \f or \t
   StringFF search { exch pop exch pop } if
   StringTAB search { exch pop exch pop } if
   dup lpshow
   length dup 2 index length exch sub getinterval
 } def

/skip1
 { dup length 1 sub 1 exch getinterval
 } def

/e== {		% <object> e== - -- print an object to stderr
  (%stderr) (w) file dup 3 -1 roll write==only flushfile
} def

/eprint {	% <string> eprint - -- print a string to stderr
  (%stderr) (w) file dup 3 -1 roll writestring flushfile
} def

% The main printing procedure

/lp		% file initial_chars ->
 { /lpline exch def
   /lpfile exch def
   /save 0 true lpexec

% Initialize the device and fonts.
   /BFont
     BodyFont null eq { defaultBodyFont } { BodyFont } ifelse def
   /BFont BFont outfont
   Headers Footers or
    { /HFont
	HeadingFont null eq { defaultHeadingFont } { HeadingFont } ifelse def
      /HFont HFont outfont
    }
   if

% Get the layout parameters.
   clippath
   Landscape { 90 /rotate 1 true lpexec } if
   BFont setfont ( ) stringwidth pop /cwx exch def
     cwx Tab mul /tabwx exch def
   BFont fontheight /fheight exch def /fascent exch def
   Headers Footers or { HFont fontheight } { 0 0 } ifelse
     /hheight exch def /hascent exch def
     /hdescent hheight hascent sub def
   fheight Spacing mul /lheight exch def
   Headers { hheight lheight add } { 0 } ifelse
     /topskip exch def
   Footers { hheight lheight add } { 0 } ifelse
     /botskip exch def
   /pskip topskip botskip add def
	% Translate the page so that (0,0) corresponds to
	% the top of the topmost body line.
   pathbbox
     2 index sub MarginBottom MarginTop add sub /plength exch def
     2 index sub MarginLeft MarginRight add sub /pwidth exch def
     pwidth Columns div /cowidth exch def
     exch MarginLeft add
     exch MarginBottom add plength add topskip sub
     /translate 2 true lpexec
   plength pskip sub lheight div cvi MaxLines min
     dup /colines exch def
     Columns mul /llength exch def
   OutFile null ne { nulldevice } if

% Print layout
   Noisy
    { (Page height = ) eprint llength e==
      (.\n) eprint flush
    } if

% Disable stack recording so we can use stopped with readline.
   $error /recordstacks false put

% Initialize for the first page.
   /lbuf 1000 string def
   /pindex 1 def
   beginpage

% Iterate through the file.
   lpline
    { dup length /pos exch def
      lbuf exch 0 exch putinterval
       { lpfile lbuf pos lbuf length pos sub getinterval readline } stopped
       {	% Filled the line before a CR or EOF.
         exch pop showline
       }
       {	% Reached CR and/or EOF first.
         exch length pos add lbuf exch 0 exch getinterval
	 1 index { showline } if		% omit final empty line
	  { dup length 0 eq Truncate or { pop () exit } if
	    showline
	  }
	 loop
	 exch not { exit } if
       }
      ifelse
    } loop
   pop

% Wrap up.
%**************** WHY IS THIS COMMENTED OUT? ****************
%   EjectEOF { endpage } { endcolumn } ifelse
   endpage
   /restore 0 true lpexec

 } def

end

% Usage: <file> lp
%   prints <file> using the current parameter settings.
% Usage: [ <arg1> ... <argn> ] lpcommand
%   interprets args like a command line.

/lp { save   lpdict begin () lp end   restore } def

lpdict begin

/splitfn		% (FontNNN) -> <font>
 { dup /arg exch def length
    { dup 0 le { exit } if
      dup 1 sub arg exch get dup 48 ge exch 59 le and not { exit } if
      1 sub
    } loop
   arg exch 0 exch getinterval dup cvn find-latin-font
   exch arg exch anchorsearch pop pop cvr scalefont
 } def

% Parse the command line switches.

/doswitch	% argn ... arg1 (-?) restofswitch ->
 { exch dup cvn lpdict exch known
    { cvn load exec }
    { exch pop (Unknown switch: ) eprint eprint (\n) eprint }
   ifelse
 } def

/more		% argn ... arg1 restofswitch ->
 { dup length 0 ne
    { (- ) dup 1 3 index 0 get put
      exch dup length 1 sub 1 exch getinterval
      doswitch
    }
    { pop
    }
   ifelse
 } def

/-- { (--) exch concatstrings
      dup cvn lpdict exch known
       { cvn load exec }
       { (Unknown switch: ) eprint eprint (\n) eprint }
      ifelse
    } def
/--columns { cvi 1 max /Columns exch def } def
/--detect { /DetectFileType true def } def
/--first-page { cvi /PageFirst exch def } def
/--footing-center { /FootingCenter exch def   /Footers true def } def
/--footing-left { /FootingLeft exch def   /Footers true def } def
/--footing-right { /FootingRight exch def   /Footers true def} def
/--heading-center { /HeadingCenter exch def   /Headers true def } def
/--heading-left { /HeadingLeft exch def   /Headers true def } def
/--heading-right { /HeadingRight exch def   /Headers true def } def
/--last-page { cvi /PageLast exch def } def
/--margin-bottom { cvr 72.0 mul /MarginBottom exch def } def
/--margin-left { cvr 72.0 mul /MarginLeft exch def } def
/--margin-right { cvr 72.0 mul /MarginRight exch def } def
/--margin-top { cvr 72.0 mul /MarginTop exch def } def
/--no-eject-file { /EjectEOF false def } def
/--no-eject-formfeed { /EjectFF false def } def
/--spacing { cvr /Spacing exch def } def

/-# { pop } def		% ignore
/-+ { -- } def
(-1)cvn { /Columns 1 def   more } def
(-2)cvn { /Columns 2 def   more } def
/-b { /HeadingLeft exch def   /HeadingCenter () def   /HeadingRight PageNumberString def
      /Headers true def
      /break true def
    } def
/-B { /HeadingLeft () def   /HeadingCenter () def   /HeadingRight () def
      /Headers false def
      /FootingLeft () def   /FootingCenter () def   /FootingRight () def
      /Footers false def
      /break true def
      more
    } def
/-C { pop } def		% ignore
/-c { /Truncate true def   more } def
/-d { pop } def		% ignore
/-f { splitfn /BodyFont exch def } def
/-F { splitfn /HeadingFont exch def } def
/-G { more } def	% ignore
/-g { more } def	% ignore
/-h { more } def	% ignore
/-J { pop } def		% ignore
/-K { more } def	% ignore
/-k { more } def	% ignore
/-l { 66 -L -B } def
/-L { cvi /MaxLines exch def } def
/-m { more } def	% ignore
/-n { pop } def		% ignore
/-o { more } def	% ignore
/-p { (w) file /OutFile exch def   OutFile (%!\n) writestring } def
/-P { pop } def		% ignore
/-q { /Noisy false def   more } def
/-r { /Landscape true def   more } def
/-R { /Landscape false def   more } def
/-S { pop } def		% ignore
/-s { pop } def		% ignore
/-T { cvi /Tab exch def } def
/-v { pop } def		% ignore
/-w { more } def	% ignore

/lp1		% filename ->
 { break not { dup /HeadingLeft exch def } if
   Noisy
    { (Printing ) eprint dup eprint (\n) eprint
    } if
   (r) file
		% If requested, check for a PostScript file.
   DetectFileType
    { dup 2 string readstring pop dup (%!) eq
       {	% Yes, it's a PostScript file.
         pop dup 80 string readline pop pop cvx exec
       }
       { lp
       }
      ifelse
    }
    { () lp
    }
   ifelse
 } bind def

/lpcstring 100 string def

end

/lpcommand		% [arg1 ... argn] -> -
 {	% Push the commands on the stack in reverse order
   mark exch
   dup length 1 sub -1 0 { 1 index exch get exch } for pop
   lpdict begin
   /break false def
    { dup mark eq { pop exit } if
      dup length 2 ge { dup 0 get (-) 0 get eq } { false } ifelse
       { dup 0 2 getinterval
         exch dup length 2 sub 2 exch getinterval
	 doswitch
       }
       { dup  /matched false def
          { /matched true def	lp1 } lpcstring filenameforall
	 matched { pop } { lp1 } ifelse		% let the error happen
       }
      ifelse
    } loop
   OutFile null ne
    { OutFile (%stdout) (w) file ne { OutFile closefile } if
      /OutFile null def
    } if
   end
 } def

[ shellarguments
 { ] dup length 0 ne
    { lpcommand
    }
    { (Usage: gslp [-12BclqRr] [-b<header] [-f<font>] [-F<hfont>]\n) eprint
      (		[-L<lines>] [-p<outfile>] [-T<tabwidth>] [--columns <n>]\n) eprint
      (		[--detect] [--first-page <page#>] [--last-page <page#>]\n) eprint
      (		[--(heading|footing)-(left|right|center) <string>]\n) eprint
      (		[--margin-(top|bottom|left|right) <inches>]\n) eprint
      (		[--no-eject-(file|formfeed)] [--spacing <n>] file1 ... filen\n) eprint
    }
   ifelse
 }
 { pop }
ifelse
